// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>UnitTests.Viper.Schema</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net30</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace UnitTests.Viper.Schema
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    public partial class viper
    {

        private List<configTypeDescriptor> configField;

        private List<mediaSequenceType> sequencesField;

        private List<sourcefileType> dataField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public viper()
        {
            this.dataField = new List<sourcefileType>();
            this.sequencesField = new List<mediaSequenceType>();
            this.configField = new List<configTypeDescriptor>();
        }

        [System.Xml.Serialization.XmlArrayAttribute( Order = 0 )]
        [System.Xml.Serialization.XmlArrayItemAttribute( "descriptor", IsNullable = false )]
        public List<configTypeDescriptor> config
        {
            get
            {
                return this.configField;
            }
            set
            {
                this.configField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute( Order = 1 )]
        [System.Xml.Serialization.XmlArrayItemAttribute( "sequence", IsNullable = false )]
        public List<mediaSequenceType> sequences
        {
            get
            {
                return this.sequencesField;
            }
            set
            {
                this.sequencesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute( Order = 2 )]
        [System.Xml.Serialization.XmlArrayItemAttribute( "sourcefile", IsNullable = false )]
        public List<sourcefileType> data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( viper ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current viper object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an viper object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output viper object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out viper obj, out System.Exception exception )
        {
            exception = null;
            obj = default( viper );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out viper obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static viper Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( viper ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current viper object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an viper object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output viper object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out viper obj, out System.Exception exception )
        {
            exception = null;
            obj = default( viper );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out viper obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static viper LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class configTypeDescriptor
    {

        private List<attributePrototype> attributeField;

        private string nameField;

        private descriptorCategory typeField;

        private bool typeFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public configTypeDescriptor()
        {
            this.attributeField = new List<attributePrototype>();
        }

        public List<attributePrototype> attribute
        {
            get
            {
                return this.attributeField;
            }
            set
            {
                this.attributeField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        public descriptorCategory type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified
        {
            get
            {
                return this.typeFieldSpecified;
            }
            set
            {
                this.typeFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( configTypeDescriptor ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current configTypeDescriptor object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an configTypeDescriptor object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output configTypeDescriptor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out configTypeDescriptor obj, out System.Exception exception )
        {
            exception = null;
            obj = default( configTypeDescriptor );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out configTypeDescriptor obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static configTypeDescriptor Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( configTypeDescriptor ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current configTypeDescriptor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an configTypeDescriptor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output configTypeDescriptor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out configTypeDescriptor obj, out System.Exception exception )
        {
            exception = null;
            obj = default( configTypeDescriptor );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out configTypeDescriptor obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static configTypeDescriptor LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototype
    {

        private attributePrototypeDefault defaultField;

        private string nameField;

        private string typeField;

        private bool dynamicField;

        private bool dynamicFieldSpecified;

        private List<System.Xml.XmlAttribute> anyAttrField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public attributePrototype()
        {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.defaultField = new attributePrototypeDefault();
        }

        public attributePrototypeDefault @default
        {
            get
            {
                return this.defaultField;
            }
            set
            {
                this.defaultField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        public string type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        public bool dynamic
        {
            get
            {
                return this.dynamicField;
            }
            set
            {
                this.dynamicField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dynamicSpecified
        {
            get
            {
                return this.dynamicFieldSpecified;
            }
            set
            {
                this.dynamicFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototype ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototype object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototype object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototype obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototype );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototype obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototype Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototype ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototype object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototype obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototype );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototype obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototype LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefault
    {

        private descriptorAttributeData itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public descriptorAttributeData Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefault ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefault object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefault object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefault object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefault obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefault );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefault obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefault Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefault ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefault object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefault object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefault object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefault obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefault );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefault obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefault LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullBbox : descriptorAttributeData
    {

        private string xField;

        private string yField;

        private string widthField;

        private string heightField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        public string y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        public string width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthField = value;
            }
        }

        public string height
        {
            get
            {
                return this.heightField;
            }
            set
            {
                this.heightField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullBbox ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullBbox object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullBbox object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullBbox object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullBbox obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullBbox );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullBbox obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullBbox Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullBbox ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullBbox object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullBbox object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullBbox object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullBbox obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullBbox );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullBbox obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullBbox LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public abstract partial class descriptorAttributeData
    {

        private string spanField;

        private string framespanField;

        private string timespanField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string span
        {
            get
            {
                return this.spanField;
            }
            set
            {
                this.spanField = value;
            }
        }

        public string framespan
        {
            get
            {
                return this.framespanField;
            }
            set
            {
                this.framespanField = value;
            }
        }

        public string timespan
        {
            get
            {
                return this.timespanField;
            }
            set
            {
                this.timespanField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( descriptorAttributeData ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current descriptorAttributeData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an descriptorAttributeData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output descriptorAttributeData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out descriptorAttributeData obj, out System.Exception exception )
        {
            exception = null;
            obj = default( descriptorAttributeData );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out descriptorAttributeData obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static descriptorAttributeData Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( descriptorAttributeData ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current descriptorAttributeData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an descriptorAttributeData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output descriptorAttributeData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out descriptorAttributeData obj, out System.Exception exception )
        {
            exception = null;
            obj = default( descriptorAttributeData );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out descriptorAttributeData obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static descriptorAttributeData LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class descriptorType
    {

        private List<descriptorTypeAttribute> attributeField;

        private string nameField;

        private string idField;

        private string framespanField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public descriptorType()
        {
            this.attributeField = new List<descriptorTypeAttribute>();
        }

        public List<descriptorTypeAttribute> attribute
        {
            get
            {
                return this.attributeField;
            }
            set
            {
                this.attributeField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public string framespan
        {
            get
            {
                return this.framespanField;
            }
            set
            {
                this.framespanField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( descriptorType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current descriptorType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an descriptorType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output descriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out descriptorType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( descriptorType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out descriptorType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static descriptorType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( descriptorType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current descriptorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an descriptorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output descriptorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out descriptorType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( descriptorType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out descriptorType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static descriptorType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class descriptorTypeAttribute
    {

        private List<descriptorAttributeData> itemsField;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public descriptorTypeAttribute()
        {
            this.itemsField = new List<descriptorAttributeData>();
        }

        public List<descriptorAttributeData> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( descriptorTypeAttribute ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current descriptorTypeAttribute object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an descriptorTypeAttribute object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output descriptorTypeAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out descriptorTypeAttribute obj, out System.Exception exception )
        {
            exception = null;
            obj = default( descriptorTypeAttribute );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out descriptorTypeAttribute obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static descriptorTypeAttribute Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( descriptorTypeAttribute ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current descriptorTypeAttribute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an descriptorTypeAttribute object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output descriptorTypeAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out descriptorTypeAttribute obj, out System.Exception exception )
        {
            exception = null;
            obj = default( descriptorTypeAttribute );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out descriptorTypeAttribute obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static descriptorTypeAttribute LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullBvalue : descriptorAttributeData
    {

        private bool valueField;

        private bool valueFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public bool value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueSpecified
        {
            get
            {
                return this.valueFieldSpecified;
            }
            set
            {
                this.valueFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullBvalue ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullBvalue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullBvalue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullBvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullBvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullBvalue );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullBvalue obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullBvalue Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullBvalue ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullBvalue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullBvalue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullBvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullBvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullBvalue );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullBvalue obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullBvalue LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullCircle : descriptorAttributeData
    {

        private string xField;

        private string yField;

        private string radiusField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        public string y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        public string radius
        {
            get
            {
                return this.radiusField;
            }
            set
            {
                this.radiusField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullCircle ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullCircle object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullCircle object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullCircle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullCircle obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullCircle );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullCircle obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullCircle Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullCircle ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullCircle object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullCircle object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullCircle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullCircle obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullCircle );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullCircle obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullCircle LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullDvalue : descriptorAttributeData
    {

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullDvalue ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullDvalue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullDvalue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullDvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullDvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullDvalue );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullDvalue obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullDvalue Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullDvalue ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullDvalue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullDvalue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullDvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullDvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullDvalue );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullDvalue obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullDvalue LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullFvalue : descriptorAttributeData
    {

        private decimal valueField;

        private bool valueFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public decimal value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueSpecified
        {
            get
            {
                return this.valueFieldSpecified;
            }
            set
            {
                this.valueFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullFvalue ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullFvalue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullFvalue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullFvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullFvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullFvalue );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullFvalue obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullFvalue Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullFvalue ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullFvalue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullFvalue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullFvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullFvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullFvalue );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullFvalue obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullFvalue LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullLvalue : descriptorAttributeData
    {

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullLvalue ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullLvalue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullLvalue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullLvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullLvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullLvalue );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullLvalue obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullLvalue Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullLvalue ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullLvalue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullLvalue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullLvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullLvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullLvalue );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullLvalue obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullLvalue LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullObox : descriptorAttributeData
    {

        private string xField;

        private string yField;

        private string widthField;

        private string heightField;

        private string rotationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        public string y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        public string width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthField = value;
            }
        }

        public string height
        {
            get
            {
                return this.heightField;
            }
            set
            {
                this.heightField = value;
            }
        }

        public string rotation
        {
            get
            {
                return this.rotationField;
            }
            set
            {
                this.rotationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullObox ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullObox object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullObox object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullObox object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullObox obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullObox );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullObox obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullObox Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullObox ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullObox object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullObox object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullObox object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullObox obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullObox );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullObox obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullObox LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullPoint : descriptorAttributeData
    {

        private string xField;

        private string yField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        public string y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullPoint ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullPoint object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullPoint object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullPoint obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullPoint );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullPoint obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullPoint Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullPoint ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullPoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullPoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullPoint obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullPoint );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullPoint obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullPoint LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullRelation : descriptorAttributeData
    {

        private List<string> valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public attributePrototypeDefaultNullRelation()
        {
            this.valueField = new List<string>();
        }

        public List<string> value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullRelation ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullRelation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullRelation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullRelation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullRelation obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullRelation );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullRelation obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullRelation Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullRelation ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullRelation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullRelation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullRelation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullRelation obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullRelation );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullRelation obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullRelation LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class attributePrototypeDefaultNullSvalue : descriptorAttributeData
    {

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( attributePrototypeDefaultNullSvalue ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current attributePrototypeDefaultNullSvalue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an attributePrototypeDefaultNullSvalue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullSvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out attributePrototypeDefaultNullSvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullSvalue );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out attributePrototypeDefaultNullSvalue obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static attributePrototypeDefaultNullSvalue Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( attributePrototypeDefaultNullSvalue ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current attributePrototypeDefaultNullSvalue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an attributePrototypeDefaultNullSvalue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output attributePrototypeDefaultNullSvalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullSvalue obj, out System.Exception exception )
        {
            exception = null;
            obj = default( attributePrototypeDefaultNullSvalue );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out attributePrototypeDefaultNullSvalue obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static attributePrototypeDefaultNullSvalue LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class sourcefileType
    {

        private List<descriptorType> itemsField;

        private List<ItemsChoiceType> itemsElementNameField;

        private string filenameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public sourcefileType()
        {
            this.itemsElementNameField = new List<ItemsChoiceType>();
            this.itemsField = new List<descriptorType>();
        }

        [System.Xml.Serialization.XmlChoiceIdentifierAttribute( "ItemsElementName" )]
        public List<descriptorType> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        public string filename
        {
            get
            {
                return this.filenameField;
            }
            set
            {
                this.filenameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( sourcefileType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current sourcefileType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an sourcefileType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output sourcefileType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out sourcefileType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( sourcefileType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out sourcefileType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static sourcefileType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( sourcefileType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current sourcefileType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an sourcefileType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output sourcefileType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out sourcefileType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( sourcefileType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out sourcefileType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static sourcefileType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public enum ItemsChoiceType
    {

        /// <remarks/>
        content,

        /// <remarks/>
        file,

        /// <remarks/>
        @object,
    }

    public partial class mediaAtomType
    {

        private string hrefField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string href
        {
            get
            {
                return this.hrefField;
            }
            set
            {
                this.hrefField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( mediaAtomType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current mediaAtomType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an mediaAtomType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output mediaAtomType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out mediaAtomType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( mediaAtomType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out mediaAtomType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static mediaAtomType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( mediaAtomType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current mediaAtomType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an mediaAtomType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output mediaAtomType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out mediaAtomType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( mediaAtomType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out mediaAtomType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static mediaAtomType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class mediaSequenceType
    {

        private List<mediaAtomType> clipField;

        private string idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public mediaSequenceType()
        {
            this.clipField = new List<mediaAtomType>();
        }

        public List<mediaAtomType> clip
        {
            get
            {
                return this.clipField;
            }
            set
            {
                this.clipField = value;
            }
        }

        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( mediaSequenceType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current mediaSequenceType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an mediaSequenceType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output mediaSequenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out mediaSequenceType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( mediaSequenceType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out mediaSequenceType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static mediaSequenceType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( mediaSequenceType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current mediaSequenceType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an mediaSequenceType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output mediaSequenceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out mediaSequenceType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( mediaSequenceType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out mediaSequenceType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static mediaSequenceType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public enum descriptorCategory
    {

        /// <remarks/>
        FILE,

        /// <remarks/>
        CATEGORY,

        /// <remarks/>
        OBJECT,
    }

    public partial class lvaluepossibles
    {

        private List<lvaluepossiblesLvalueenum> lvalueenumField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public lvaluepossibles()
        {
            this.lvalueenumField = new List<lvaluepossiblesLvalueenum>();
        }

        public List<lvaluepossiblesLvalueenum> lvalueenum
        {
            get
            {
                return this.lvalueenumField;
            }
            set
            {
                this.lvalueenumField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( lvaluepossibles ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current lvaluepossibles object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an lvaluepossibles object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output lvaluepossibles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out lvaluepossibles obj, out System.Exception exception )
        {
            exception = null;
            obj = default( lvaluepossibles );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out lvaluepossibles obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static lvaluepossibles Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( lvaluepossibles ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current lvaluepossibles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an lvaluepossibles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output lvaluepossibles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out lvaluepossibles obj, out System.Exception exception )
        {
            exception = null;
            obj = default( lvaluepossibles );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out lvaluepossibles obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static lvaluepossibles LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class lvaluepossiblesLvalueenum
    {

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( lvaluepossiblesLvalueenum ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current lvaluepossiblesLvalueenum object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an lvaluepossiblesLvalueenum object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output lvaluepossiblesLvalueenum object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out lvaluepossiblesLvalueenum obj, out System.Exception exception )
        {
            exception = null;
            obj = default( lvaluepossiblesLvalueenum );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out lvaluepossiblesLvalueenum obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static lvaluepossiblesLvalueenum Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( lvaluepossiblesLvalueenum ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current lvaluepossiblesLvalueenum object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an lvaluepossiblesLvalueenum object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output lvaluepossiblesLvalueenum object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out lvaluepossiblesLvalueenum obj, out System.Exception exception )
        {
            exception = null;
            obj = default( lvaluepossiblesLvalueenum );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out lvaluepossiblesLvalueenum obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static lvaluepossiblesLvalueenum LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class configType
    {

        private List<configTypeDescriptor> descriptorField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public configType()
        {
            this.descriptorField = new List<configTypeDescriptor>();
        }

        public List<configTypeDescriptor> descriptor
        {
            get
            {
                return this.descriptorField;
            }
            set
            {
                this.descriptorField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( configType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current configType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an configType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output configType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out configType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( configType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out configType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static configType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( configType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current configType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an configType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output configType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out configType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( configType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out configType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static configType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class dataType
    {

        private List<sourcefileType> sourcefileField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public dataType()
        {
            this.sourcefileField = new List<sourcefileType>();
        }

        public List<sourcefileType> sourcefile
        {
            get
            {
                return this.sourcefileField;
            }
            set
            {
                this.sourcefileField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( dataType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current dataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an dataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output dataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out dataType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( dataType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out dataType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static dataType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( dataType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current dataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an dataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output dataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out dataType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( dataType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out dataType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static dataType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class mediaSequenceListingType
    {

        private List<mediaSequenceType> sequenceField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public mediaSequenceListingType()
        {
            this.sequenceField = new List<mediaSequenceType>();
        }

        public List<mediaSequenceType> sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ( ( serializer == null ) )
                {
                    serializer = new System.Xml.Serialization.XmlSerializer( typeof( mediaSequenceListingType ) );
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current mediaSequenceListingType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize( memoryStream, this );
                memoryStream.Seek( 0, System.IO.SeekOrigin.Begin );
                streamReader = new System.IO.StreamReader( memoryStream );
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ( ( streamReader != null ) )
                {
                    streamReader.Dispose();
                }
                if ( ( memoryStream != null ) )
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an mediaSequenceListingType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output mediaSequenceListingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize( string xml, out mediaSequenceListingType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( mediaSequenceListingType );
            try
            {
                obj = Deserialize( xml );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize( string xml, out mediaSequenceListingType obj )
        {
            System.Exception exception = null;
            return Deserialize( xml, out obj, out exception );
        }

        public static mediaSequenceListingType Deserialize( string xml )
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader( xml );
                return ( ( mediaSequenceListingType ) ( Serializer.Deserialize( System.Xml.XmlReader.Create( stringReader ) ) ) );
            }
            finally
            {
                if ( ( stringReader != null ) )
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current mediaSequenceListingType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile( string fileName, out System.Exception exception )
        {
            exception = null;
            try
            {
                SaveToFile( fileName );
                return true;
            }
            catch ( System.Exception e )
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile( string fileName )
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo( fileName );
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine( xmlString );
                streamWriter.Close();
            }
            finally
            {
                if ( ( streamWriter != null ) )
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an mediaSequenceListingType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output mediaSequenceListingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile( string fileName, out mediaSequenceListingType obj, out System.Exception exception )
        {
            exception = null;
            obj = default( mediaSequenceListingType );
            try
            {
                obj = LoadFromFile( fileName );
                return true;
            }
            catch ( System.Exception ex )
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile( string fileName, out mediaSequenceListingType obj )
        {
            System.Exception exception = null;
            return LoadFromFile( fileName, out obj, out exception );
        }

        public static mediaSequenceListingType LoadFromFile( string fileName )
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream( fileName, FileMode.Open, FileAccess.Read );
                sr = new System.IO.StreamReader( file );
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize( xmlString );
            }
            finally
            {
                if ( ( file != null ) )
                {
                    file.Dispose();
                }
                if ( ( sr != null ) )
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
